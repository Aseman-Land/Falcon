import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable Falcon.Base 1.0'

Module {
    dependencies: ["QtQuick 2.8"]
    Component {
        name: "AsemanAbstractAgentClient"
        prototype: "QObject"
        Property { name: "socket"; type: "AsemanAbstractClientSocket"; isPointer: true }
        Signal {
            name: "error"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "errorCode"; type: "int" }
            Parameter { name: "errorValue"; type: "QVariant" }
        }
        Signal {
            name: "answer"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "result"; type: "QVariant" }
        }
        Method {
            name: "pushRequest"
            type: "qlonglong"
            Parameter { name: "method"; type: "string" }
            Parameter { name: "args"; type: "QVariantList" }
            Parameter { name: "priority"; type: "int" }
            Parameter { name: "hasResult"; type: "bool" }
        }
        Method {
            name: "pushRequest"
            type: "qlonglong"
            Parameter { name: "service"; type: "string" }
            Parameter { name: "version"; type: "int" }
            Parameter { name: "method"; type: "string" }
            Parameter { name: "args"; type: "QVariantList" }
            Parameter { name: "priority"; type: "int" }
            Parameter { name: "hasResult"; type: "bool" }
        }
    }
    Component {
        name: "AsemanAbstractClientSocket"
        prototype: "QObject"
        Property { name: "hostAddress"; type: "string" }
        Property { name: "port"; type: "int" }
        Property { name: "certificate"; type: "QUrl" }
        Property { name: "ssl"; type: "bool" }
        Property { name: "autoTrust"; type: "bool" }
        Property { name: "connecting"; type: "bool"; isReadonly: true }
        Signal { name: "connected" }
        Signal {
            name: "answer"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "result"; type: "QVariant" }
        }
        Signal {
            name: "error"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "result"; type: "CallbackError" }
        }
        Signal {
            name: "error"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "errorCode"; type: "int" }
            Parameter { name: "errorValue"; type: "QVariant" }
        }
        Signal {
            name: "generalError"
            Parameter { name: "text"; type: "string" }
        }
        Signal {
            name: "signalEmitted"
            Parameter { name: "signalName"; type: "string" }
            Parameter { name: "args"; type: "QVariantList" }
        }
        Method { name: "wake" }
        Method { name: "sleep" }
        Method {
            name: "pushRequest"
            type: "qlonglong"
            Parameter { name: "service"; type: "string" }
            Parameter { name: "version"; type: "int" }
            Parameter { name: "method"; type: "string" }
            Parameter { name: "args"; type: "QVariantList" }
            Parameter { name: "priority"; type: "int" }
            Parameter { name: "hasResult"; type: "bool" }
        }
    }
    Component {
        name: "AsemanClientSocket"
        prototype: "AsemanAbstractClientSocket"
        exports: ["Falcon.Base/ClientSocket 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "trustKey"; type: "string" }
        Property { name: "streamVersion"; type: "int" }
        Signal { name: "queueFinished" }
        Signal { name: "trusted" }
        Signal { name: "trustError" }
        Signal { name: "callsRejected" }
        Signal { name: "hardBlocked" }
        Method { name: "startDestroying" }
        Method { name: "wake" }
        Method { name: "sleep" }
        Method {
            name: "ping"
            type: "qlonglong"
            Parameter { name: "service"; type: "string" }
            Parameter { name: "version"; type: "int" }
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "pushRequest"
            type: "qlonglong"
            Parameter { name: "service"; type: "string" }
            Parameter { name: "version"; type: "int" }
            Parameter { name: "method"; type: "string" }
            Parameter { name: "args"; type: "QVariantList" }
            Parameter { name: "priority"; type: "int" }
            Parameter { name: "hasResult"; type: "bool" }
        }
    }
    Component {
        name: "AsemanGeneralModel"
        prototype: "QAbstractListModel"
        exports: ["Falcon.Base/GeneralModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SortMode"
            values: {
                "SortNoSort": 0,
                "SortAscending": 1,
                "SortDescending": 2
            }
        }
        Property { name: "agent"; type: "AsemanAbstractAgentClient"; isPointer: true }
        Property { name: "method"; type: "string" }
        Property { name: "arguments"; type: "QVariantList" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "offset"; type: "int"; isReadonly: true }
        Property { name: "sortMode"; type: "int" }
        Property { name: "limit"; type: "int" }
        Property { name: "uniqueKeyField"; type: "string" }
        Property { name: "listProperty"; type: "string" }
        Property { name: "errorCode"; type: "qlonglong"; isReadonly: true }
        Property { name: "errorValue"; type: "QVariant"; isReadonly: true }
        Property { name: "refreshing"; type: "bool"; isReadonly: true }
        Signal { name: "lastRequestChanged" }
        Signal { name: "listChanged" }
        Signal {
            name: "error"
            Parameter { name: "errorCode"; type: "int" }
            Parameter { name: "errorValue"; type: "QVariant" }
        }
        Signal { name: "errorChanged" }
        Method { name: "clear" }
        Method { name: "refresh" }
        Method { name: "more" }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "roleName"; type: "string" }
        }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "roles"; type: "QStringList" }
    }
    Component {
        name: "AsemanRemoteFile"
        prototype: "QObject"
        exports: ["Falcon.Base/RemoteFile 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ReceiveMethod"
            values: {
                "ReceiveMediaNormal": 0,
                "ReceiveMediaBigFile": 1
            }
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "destination"; type: "QUrl" }
        Property { name: "destinationFileId"; type: "string" }
        Property { name: "receiveMethod"; type: "int" }
        Property { name: "socket"; type: "AsemanAbstractClientSocket"; isPointer: true }
        Property { name: "details"; type: "QVariantMap"; isReadonly: true }
        Property { name: "size"; type: "qlonglong"; isReadonly: true }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Property { name: "downloading"; type: "bool" }
        Property { name: "startOffset"; type: "qlonglong" }
        Property { name: "finalPath"; type: "QUrl"; isReadonly: true }
        Signal {
            name: "error"
            Parameter { name: "errorCode"; type: "int" }
            Parameter { name: "errorValue"; type: "QVariant" }
        }
        Method { name: "start" }
        Method { name: "stop" }
    }
    Component {
        name: "File1"
        prototype: "AsemanAbstractAgentClient"
        exports: ["Falcon.Base/File 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Permission"
            values: {
                "PermissionPublicNone": 0,
                "PermissionPublicRead": 1,
                "PermissionPublicWrite": 2
            }
        }
        Enum {
            name: "Errors"
            values: {
                "ErrorFileNotFound": 152198076,
                "ErrorFileIdNotFound": 17276813,
                "ErrorBadOffsettSize": 145713596,
                "ErrorSeekError": 82094864,
                "ErrorBigFile": 104862948,
                "ErrorCreateFile": 45818119,
                "ErrorFilePermissionDenied": 171379857,
                "ErrorFileOpenError": 33326201
            }
        }
        Property { name: "name_ping"; type: "string"; isReadonly: true }
        Property { name: "name_getFilePart"; type: "string"; isReadonly: true }
        Property { name: "name_getFileBigPart"; type: "string"; isReadonly: true }
        Property { name: "name_getBigFileCancel"; type: "string"; isReadonly: true }
        Property { name: "name_getFileDetails"; type: "string"; isReadonly: true }
        Property { name: "name_writeToFile"; type: "string"; isReadonly: true }
        Property { name: "name_finishWriteFile"; type: "string"; isReadonly: true }
        Property { name: "name_checkPermission"; type: "string"; isReadonly: true }
        Signal { name: "fakeSignal" }
        Signal {
            name: "pingAnswer"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "result"; type: "string" }
        }
        Signal {
            name: "pingError"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "errorCode"; type: "int" }
            Parameter { name: "errorValue"; type: "QVariant" }
        }
        Signal {
            name: "getFileBigPartResult"
            Parameter { name: "_id"; type: "qlonglong" }
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal {
            name: "getFilePartAnswer"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "result"; type: "QByteArray" }
        }
        Signal {
            name: "getFilePartError"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "errorCode"; type: "int" }
            Parameter { name: "errorValue"; type: "QVariant" }
        }
        Signal {
            name: "getFileBigPartAnswer"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "result"; type: "qlonglong" }
        }
        Signal {
            name: "getFileBigPartError"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "errorCode"; type: "int" }
            Parameter { name: "errorValue"; type: "QVariant" }
        }
        Signal {
            name: "getBigFileCancelAnswer"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "result"; type: "bool" }
        }
        Signal {
            name: "getBigFileCancelError"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "errorCode"; type: "int" }
            Parameter { name: "errorValue"; type: "QVariant" }
        }
        Signal {
            name: "getFileDetailsAnswer"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "result"; type: "QVariantMap" }
        }
        Signal {
            name: "getFileDetailsError"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "errorCode"; type: "int" }
            Parameter { name: "errorValue"; type: "QVariant" }
        }
        Signal {
            name: "writeToFileAnswer"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "result"; type: "bool" }
        }
        Signal {
            name: "writeToFileError"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "errorCode"; type: "int" }
            Parameter { name: "errorValue"; type: "QVariant" }
        }
        Signal {
            name: "finishWriteFileAnswer"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "result"; type: "bool" }
        }
        Signal {
            name: "finishWriteFileError"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "errorCode"; type: "int" }
            Parameter { name: "errorValue"; type: "QVariant" }
        }
        Signal {
            name: "checkPermissionAnswer"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "result"; type: "bool" }
        }
        Signal {
            name: "checkPermissionError"
            Parameter { name: "id"; type: "qlonglong" }
            Parameter { name: "errorCode"; type: "int" }
            Parameter { name: "errorValue"; type: "QVariant" }
        }
        Method {
            name: "ping"
            type: "qlonglong"
            Parameter { name: "num"; type: "int" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "ping"
            type: "qlonglong"
            Parameter { name: "num"; type: "int" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
        }
        Method {
            name: "getFilePart"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "offset"; type: "qlonglong" }
            Parameter { name: "limit"; type: "int" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "getFilePart"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "offset"; type: "qlonglong" }
            Parameter { name: "limit"; type: "int" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
        }
        Method {
            name: "getFileBigPart"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "offset"; type: "qlonglong" }
            Parameter { name: "limit"; type: "int" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "getFileBigPart"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "offset"; type: "qlonglong" }
            Parameter { name: "limit"; type: "int" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
        }
        Method {
            name: "getBigFileCancel"
            type: "qlonglong"
            Parameter { name: "_id"; type: "qlonglong" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "getBigFileCancel"
            type: "qlonglong"
            Parameter { name: "_id"; type: "qlonglong" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
        }
        Method {
            name: "getFileDetails"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "getFileDetails"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
        }
        Method {
            name: "writeToFile"
            type: "qlonglong"
            Parameter { name: "fileId"; type: "string" }
            Parameter { name: "offset"; type: "int" }
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "writeToFile"
            type: "qlonglong"
            Parameter { name: "fileId"; type: "string" }
            Parameter { name: "offset"; type: "int" }
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
        }
        Method {
            name: "finishWriteFile"
            type: "qlonglong"
            Parameter { name: "fileId"; type: "string" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "finishWriteFile"
            type: "qlonglong"
            Parameter { name: "fileId"; type: "string" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
        }
        Method {
            name: "checkPermission"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "checkPermission"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
        }
        Method {
            name: "ping"
            type: "qlonglong"
            Parameter { name: "num"; type: "int" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<QString>" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "ping"
            type: "qlonglong"
            Parameter { name: "num"; type: "int" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<QString>" }
        }
        Method {
            name: "ping"
            type: "qlonglong"
            Parameter { name: "num"; type: "int" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "ping"
            type: "qlonglong"
            Parameter { name: "num"; type: "int" }
        }
        Method {
            name: "getFilePart"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "offset"; type: "qlonglong" }
            Parameter { name: "limit"; type: "int" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<QByteArray>" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "getFilePart"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "offset"; type: "qlonglong" }
            Parameter { name: "limit"; type: "int" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<QByteArray>" }
        }
        Method {
            name: "getFilePart"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "offset"; type: "qlonglong" }
            Parameter { name: "limit"; type: "int" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "getFilePart"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "offset"; type: "qlonglong" }
            Parameter { name: "limit"; type: "int" }
        }
        Method {
            name: "getFileBigPart"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "offset"; type: "qlonglong" }
            Parameter { name: "limit"; type: "int" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<qlonglong>" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "getFileBigPart"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "offset"; type: "qlonglong" }
            Parameter { name: "limit"; type: "int" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<qlonglong>" }
        }
        Method {
            name: "getFileBigPart"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "offset"; type: "qlonglong" }
            Parameter { name: "limit"; type: "int" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "getFileBigPart"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "offset"; type: "qlonglong" }
            Parameter { name: "limit"; type: "int" }
        }
        Method {
            name: "getBigFileCancel"
            type: "qlonglong"
            Parameter { name: "_id"; type: "qlonglong" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<bool>" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "getBigFileCancel"
            type: "qlonglong"
            Parameter { name: "_id"; type: "qlonglong" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<bool>" }
        }
        Method {
            name: "getBigFileCancel"
            type: "qlonglong"
            Parameter { name: "_id"; type: "qlonglong" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "getBigFileCancel"
            type: "qlonglong"
            Parameter { name: "_id"; type: "qlonglong" }
        }
        Method {
            name: "getFileDetails"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<QVariantMap>" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "getFileDetails"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<QVariantMap>" }
        }
        Method {
            name: "getFileDetails"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "getFileDetails"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "writeToFile"
            type: "qlonglong"
            Parameter { name: "fileId"; type: "string" }
            Parameter { name: "offset"; type: "int" }
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<bool>" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "writeToFile"
            type: "qlonglong"
            Parameter { name: "fileId"; type: "string" }
            Parameter { name: "offset"; type: "int" }
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<bool>" }
        }
        Method {
            name: "writeToFile"
            type: "qlonglong"
            Parameter { name: "fileId"; type: "string" }
            Parameter { name: "offset"; type: "int" }
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "writeToFile"
            type: "qlonglong"
            Parameter { name: "fileId"; type: "string" }
            Parameter { name: "offset"; type: "int" }
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "finishWriteFile"
            type: "qlonglong"
            Parameter { name: "fileId"; type: "string" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<bool>" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "finishWriteFile"
            type: "qlonglong"
            Parameter { name: "fileId"; type: "string" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<bool>" }
        }
        Method {
            name: "finishWriteFile"
            type: "qlonglong"
            Parameter { name: "fileId"; type: "string" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "finishWriteFile"
            type: "qlonglong"
            Parameter { name: "fileId"; type: "string" }
        }
        Method {
            name: "checkPermission"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<bool>" }
            Parameter { name: "priority"; type: "int" }
        }
        Method {
            name: "checkPermission"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
            Parameter { name: "callBack"; type: "Callback<bool>" }
        }
        Method {
            name: "checkPermission"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "base"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "checkPermission"
            type: "qlonglong"
            Parameter { name: "path"; type: "string" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "Falcon.Base/RemoteImage 1.0"
        exports: ["Falcon.Base/RemoteImage 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "source"; type: "QUrl" }
        Property { name: "socket"; type: "AsemanAbstractClientSocket"; isPointer: true }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Property { name: "downloading"; type: "bool" }
        Property { name: "details"; type: "QVariantMap"; isReadonly: true }
        Property { name: "receiveMethod"; type: "int" }
        Property { name: "destination"; type: "QUrl" }
        Property { name: "fillMode"; type: "int" }
        Property { name: "asynchronous"; type: "bool" }
        Property { name: "cache"; type: "bool" }
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "mirror"; type: "bool" }
        Property { name: "paintedHeight"; type: "double"; isReadonly: true }
        Property { name: "paintedWidth"; type: "double"; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "sourceSize"; type: "QSize" }
        Property { name: "status"; type: "int"; isReadonly: true }
        Property { name: "verticalAlignment"; type: "int" }
    }
}
